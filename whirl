#!/usr/bin/env bash

AIRFLOW_UI_PORT=5000
DAEMON=""
SCRIPT_DIR=$( dirname ${BASH_SOURCE[0]} )
ENVIRONMENT_COMPOSE="default"

detect_potential_dag() {
  test -f $(pwd)/*.py || test -f $(pwd)/*.zip;
}

start() {
    echo "Starting airflow local run for environment ${ENVIRONMENT_COMPOSE}"

    docker build -t docker-whirl-airflow:local "${SCRIPT_DIR}/docker/airflow"
    docker-compose -f "${ENVIRONMENT_FOLDER}/docker-compose.yml" up ${DAEMON} --build

    if [ "${DAEMON}" == "-d" ]; then
      while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:${AIRFLOW_UI_PORT})" != "302" ]]; do
        echo "Waiting for Airflow UI to come up..."
        sleep 10;
      done
      open http://localhost:${AIRFLOW_UI_PORT}
    fi
}

stop() {
  echo "Stopping airflow-localrun containers..."
  docker-compose -f "${SCRIPT_DIR}/envs/${ENVIRONMENT_COMPOSE}/docker-compose.yml" down --volumes
}

usage() {
  echo "usage: ${BASH_SOURCE[0]} [-h|--help] [-e|--environment env] [start|stop]"
  echo "  -h|--help                          display usage"
  echo "  -e|--environment environment       specify environment to use"
  echo "  start|stop                         start or stop all"
  exit 1
}

while [[ $# -gt 0 ]]
do
    key="${1}"
    case ${key} in
    -e|--environment)
        ENVIRONMENT_COMPOSE="${2}"
        shift # past argument
        shift # past value
        ;;
    start)
        DAEMON="-d"
        shift # past argument
        ;;
    stop)
        STOP=true
        shift # past argument
        ;;
    -h|--help)
        usage
        ;;
    *)  # unknown option
        echo "WARNING: Skipping unknown commandline argument: '${key}'"
        shift # past argument
        ;;
    esac
done

export DOCKER_CONTEXT_FOLDER=${SCRIPT_DIR}/docker
export ENVIRONMENT_FOLDER=${SCRIPT_DIR}/envs/${ENVIRONMENT_COMPOSE}
export DAG_FOLDER=$(pwd)
export PROJECTNAME=$(basename ${DAG_FOLDER})
export WHIRL_SETUP_FOLDER=/etc/airflow/whirl.setup.d

if detect_potential_dag; then
  if [ -z "${STOP}" ]; then
    start
  else
    stop
  fi
else
  echo "No .py or .zip files found that may contain an Apache Airflow DAG"
fi
